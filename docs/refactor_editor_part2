
## üß† GPT-5 Prompt: State-Layer aus `Editor.tsx` extrahieren

<task_summary>  
Der `Editor.tsx` ist aktuell noch sehr lang, da er alle State-/Effekt-/Action-Logik enth√§lt. Ziel ist es, diesen Layer vollst√§ndig und **mechanisch** in einen eigenen Hook (`useEditorState.ts`) auszulagern, **ohne jegliche Verhaltens√§nderung**.  
</task_summary>  

<code_editing_rules>  
  <guiding_principles>  
    - Ziel ist ein **rein mechanischer Umzug** (kein Refactoring, keine Optimierung, keine Umbenennungen).  
    - Das Verhalten der Anwendung darf sich **nicht √§ndern**.  
    - Bestehende Funktionsnamen, R√ºckgabewerte, und Logik bleiben identisch.  
  </guiding_principles>  

  <file_structure_goal>  
    - Neuer Hook: `useEditorState.ts`  
    - Zielstruktur:  
      - `Editor.tsx`: Hook aufrufen ‚Üí Value in Provider ‚Üí UI-Komponenten rendern  
      - `useEditorState.ts`: Enth√§lt **alle** States, Refs, Effekte und Actions  
  </file_structure_goal>  

  <context_improvement>  
    - Typisiere den `EditorContext` klar und explizit.  
    - Nutze ein eindeutiges Interface f√ºr den Context-Value f√ºr bessere Developer Experience & Autocomplete.  
  </context_improvement>  
</code_editing_rules>  

<self_reflection>  
Denke zuerst √ºber die notwendigen Migrationsschritte nach, bevor du beginnst:  
- Wie identifiziere ich alle betroffenen States, Refs, Actions und Effekte systematisch?  
- Wie stelle ich sicher, dass alle Abh√§ngigkeiten korrekt √ºbernommen werden?  
- Wie kann ich die Trennung so vornehmen, dass der Code danach eindeutig wartbar bleibt?  
</self_reflection>  

<persistence>  
- Handle diesen Move als ‚ÄúZero-Risk‚Äù-Refactoring.  
- Verwende klare TODO-Kommentare bei Unsicherheiten oder √úbergangsstellen.  
- Dokumentiere alle Annahmen und Behaltensentscheidungen im Code.  
- Vermeide √ºberm√§√üige R√ºckfragen ‚Äì treffe nachvollziehbare Default-Entscheidungen.  
</persistence>  

<reasoning_effort>medium</reasoning_effort>  
